@typeparam TItem
@if (Form is null)
{
	<span>Form parameter has not been set.</span>
}
else if (Form.Mode != FormModes.Hidden && Form.Mode != FormModes.Empty)
{
<div class="pd-form-header">
	<div class="d-flex justify-content-between align-items-center">
		@if (Form.Mode == FormModes.Create)
		{
			<span>
				Create new @GetClassDescription()
				@if (Form.HasChanges)
				{
					<span class="changes-made-flag font-italic text-muted small">(changes made)</span>
				}
			</span>
			@if (Form.HelpTextMode == HelpTextMode.Toggle)
			{
				<i class="fas fa-question-circle text-info" @onclick="() => { if (Form != null) { Form.ShowHelp = !Form.ShowHelp; } }"></i>
			}
		}
		else if (Form.Mode == FormModes.Delete)
		{
			<span>Are you sure you want to delete '@GetItemDescription()'?</span>
		}
		else
		{
			<span>
				Edit '@GetItemDescription()'
				@if (Form.HasChanges)
				{
					<span class="changes-made-flag font-italic text-muted small">(changes made)</span>
				}
			</span>
			@if (Form.HelpTextMode == HelpTextMode.Toggle)
			{
				<i class="fas fa-question-circle text-info" @onclick="() => { if (Form != null) { Form.ShowHelp = !Form.ShowHelp; } }"></i>
			}
		}
	</div>
	@if (!string.IsNullOrWhiteSpace(HelpText) && (Form.Mode == FormModes.Edit || Form.Mode == FormModes.Create) &&
		(Form.HelpTextMode == HelpTextMode.Shown || (Form.HelpTextMode == HelpTextMode.Toggle && Form?.ShowHelp == true)))
	{
		<div class="small text-muted">
			@HelpText
		</div>
	}
</div>
}