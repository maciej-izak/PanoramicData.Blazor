@typeparam TItem

<style>
	.title-box {
		width: @($"{TitleWidth}px");
	}
</style>

@if (Form is null)
{
	<span>Form parameter has not been set.</span>
}
else if (Form.Mode != FormModes.Hidden)
{
<div class="pd-form-body">
	@if (Form.Mode != FormModes.Empty)
	{
		@foreach (var field in Fields)
		{
			var fieldName = field.GetName();
			var fieldType = field.GetFieldType();
			var fieldDescription = field.GetDescription();
			if (IsShown(field))
			{
				<div class="pd-form-field">
					<label class="sr-only">@field.Title</label>
					<div class="input-group ">

						<div class="input-group-prepend">
							<div class="input-group-text title-box @(fieldName != null && Form?.Errors?.ContainsKey(fieldName) == true ? "alert-danger" : "")" title="@fieldDescription">@field.Title</div>
						</div>

						<!-- editor -->
						@if(field.EditTemplate != null)
						{
							@field.EditTemplate(Form?.Item);
						}
						else if (field.IsPassword)
						{
							<input type="password" disabled="@IsReadOnly(field)" class="form-control @GetEditorClass(field)" value="@field.GetRenderValue(Form?.Item)"
									@oninput="(x) => SetFieldValueAsync(field, Convert.ChangeType(x.Value, field.GetFieldType()))">
						}
						else if (field.Options != null)
						{
							<select class="form-control @GetEditorClass(field)" @oninput="(x) => SetFieldValueAsync(field, x.Value)">
								@foreach (var option in field.Options(field, Form?.Item))
								{
									<option value="@option.Value" selected="@option.IsSelected">@option.Text</option>
								}
							</select>
						}
						else if (field.IsTextArea)
						{
							<textarea disabled="@IsReadOnly(field)" class="form-control @GetEditorClass(field)" value="@field.GetRenderValue(Form?.Item)" rows="@field.TextAreaRows"
								@oninput="(x) => SetFieldValueAsync(field, Convert.ChangeType(x.Value, field.GetFieldType()))"></textarea>
						}
						else if (fieldType?.FullName == "System.Boolean")
						{
							<PDFormCheckBox Value="@(GetFieldValue<bool>(field))" Disabled="@IsReadOnly(field)" ValueChanged="(x) => SetFieldValueAsync(field, (bool)x)" />
						}
						else if (fieldType?.IsEnum == true)
						{
							<select class="form-control @GetEditorClass(field)" @oninput="(x) => SetFieldValueAsync(field, Enum.Parse(fieldType, x.Value?.ToString()))">
								@foreach (var option in GetEnumValues(field))
								{
									<option value="@option.Value" selected="@option.IsSelected">@option.Text</option>
								}
							</select>
						}
						else if (fieldType?.FullName == "System.DateTime")
						{
							<input type="date" disabled="@IsReadOnly(field)" class="form-control @GetEditorClass(field)" value="@field.GetRenderValue(Form?.Item)"
									@oninput="(x) => SetFieldValueAsync(field, DateTime.Parse(x.Value.ToString()))">
						}
						else if (fieldType?.FullName == "System.DateTimeOffset")
						{
							<input type="date" disabled="@IsReadOnly(field)" class="form-control" value="@field.GetRenderValue(Form?.Item)"
									@oninput="(x) => SetFieldValueAsync(field, DateTimeOffset.Parse(x.Value.ToString()))">
						}
						else if (fieldType?.FullName == "System.String")
						{
							<input type="text" disabled="@IsReadOnly(field)" class="form-control @GetEditorClass(field)" value="@field.GetRenderValue(Form?.Item)"
									@oninput="(x) => SetFieldValueAsync(field, x.Value)">
						}
						else
						{
							<input type="number" disabled="@IsReadOnly(field)" class="form-control @GetEditorClass(field)" value="@field.GetRenderValue(Form?.Item)"
									@oninput="(x) => SetFieldValueAsync(field, Convert.ChangeType(x.Value, field.GetFieldType()))">
						}

						<!-- field validation indicator-->
						@if (Form?.Mode != FormModes.Delete)
						{
							<div class="input-group-append">
								@if(IsReadOnly(field))
								{
									<span class="input-group-text">
										<i class="pd-empty-icon	"></i>
									</span>
								}
								else if (fieldName != null && Form?.Errors?.ContainsKey(fieldName) == true)
								{
									<span class="input-group-text alert-danger">
										<i class="fas fa-exclamation-circle"></i>
									</span>
								}
								else
								{
									<span class="input-group-text alert-success">
										<i class="fas fa-check-circle"></i>
									</span>
								}
							</div>
						}
					</div>
					<div class="mb-2">
						@if (fieldName != null && Form?.Errors?.ContainsKey(fieldName) == true)
						{
							foreach (var message in Form.Errors[fieldName])
							{
								<div class="small text-danger">@message</div>
							}
						}
						else if (ShowDescriptions && !string.IsNullOrWhiteSpace(fieldDescription))
						{
							<div class="small text-muted">@field.GetDescription()</div>
						}
					</div>
				</div>
			}
		}
	}
</div>
}

<CascadingValue Value="(PDFormBody<TItem>)this" Name="FormBody">
	@ChildContent
</CascadingValue>