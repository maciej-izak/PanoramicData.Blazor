@typeparam TItem

<style>
	.title-box {
		width: @($"{TitleWidth}px");
	}
</style>

@if (Form is null)
{
	<span>Form parameter has not been set.</span>
}
else if (Form.Mode != FormModes.Hidden)
{
	foreach (var field in Fields)
	{
		var fieldType = @GetEditorType(field);
		if (IsShown(field))
		{
			<div class="col-auto">
				<label class="sr-only">@field.Title</label>
				<div class="input-group mb-2">

					<div class="input-group-prepend">
						<div class="input-group-text title-box">@field.Title</div>
					</div>

					<!-- editor -->
					@if (fieldType == "checkbox")
					{
						<PDFormCheckBox Value="@EvaluateAsBool(field.GetValue(Form.Item))" Disabled="@IsReadOnly(field)" />
					}
					else if (fieldType == "enum")
					{
						<select class="form-control">
							@foreach (var option in GetEnumValues(field))
							{
								<option value="@option.Value" selected="@option.IsSelected">@option.Text</option>
							}
						</select>
					}
					else
					{
						<input type="@fieldType" disabled="@IsReadOnly(field)" class="form-control" value="@field.GetValue(Form.Item)" @oninput="(x) => OnInput(field, x.Value)">
					}

					@if (Form.Mode != FormModes.Delete)
					{
						<div class="input-group-append">
							<span class="input-group-text">
								<i class="far fa-check-circle"></i>
							</span>
						</div>
					}
				</div>
			</div>
		}
	}
}

<CascadingValue Value="(PDFormBody<TItem>)this" Name="FormBody">
	@ChildContent
</CascadingValue>